<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/chatroom2.css">
</head>
<body>
    <div class="video">
        <div class="container" id="container">
            <h3 id="users">🔴</h3>
            <img src="/images/pfp-profile-picture-5382083-4495777.webp" alt="">

            <p id="peeremail">Email</p>

        </div>
        <div class="container2" id="container2" >
            <img src="/images/pfp-profile-picture-5382083-44957772.jpg" alt="">
            <!-- <h5>Name</h5> -->
            <p>You</p>
        </div>
        <div class="container3" id="container3" ></div>
        <div class="elements">
            <p id="messageboxicon">💬</p>
            <p id="cam">📽️</p>
            <p id="call-button">🤙 Start Call</p>
            <!-- <p id="end-button">📞 End Call</p> -->
            <p id="mic">🎙️</p>
            <p id="screenshare">🖥️</p>
        </div>
    </div>
    <div class="chat">
        <h2>Chat</h2>
        <div class="messagesbox">
        </div>
        <input type="text" id="textinput" placeholder="Type Your Message">
        <img src="/images/send-icon-2048x2020-jrvk5f1r-fotor-20240317112711.jpg" id="sendimg">
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src='https://cdn.jsdelivr.net/npm/react-player/dist/ReactPlayer.standalone.js'></script>
    <script type="module" src="/peer.js"></script>

    <script type="module">
        import peer from "/peer.js";

        const urlParams = new URLSearchParams(window.location.search);
        let emailID = urlParams.get('emailID');
        let roomID = urlParams.get('roomID');
        let remoteSocketID;
        let connectionelement = document.getElementById('users')
        let localstream;
        let peerSSID;
        // document.querySelector('.container2').classList.add('shift-right')
        // document.querySelector('.container').classList.add('shift-right')

        const socket = io();
        socket.emit('join-room', { roomID: roomID, emailID: emailID });
        socket.on("room:join", (data) => {
            console.log(data);
        });
        socket.on('update-users', (users) => {
            console.log('Users in the room:', users);
            // Update UI or perform other actions as needed
        });

        socket.on("user-joined",  async (data) => {
            // const p = document.createElement("p");
            // p.style.color = 'black';
            // p.style.fontWeight = 'bold';
            // p.innerText = data['emailID'] + " Joined The Chat"
            // document.getElementById('container2').style.right = '1%'
            // setTimeout(()=>{
            //     document.getElementById('container').style.display = 'block'
            // },500);
            await new Promise((resolve) => {
        document.querySelector('.container2').style.right = '10px';
        // Add a short delay to ensure the style is applied before proceeding
        setTimeout(resolve, 500);
    });           
    document.querySelector('.container').classList.add('show');

            let youremail = document.cookie.split("=")[1]

            document.getElementById('peeremail').innerText = data.emailID
            remoteSocketID = data['id'];
            socket.emit("Setremotesocketid",{youremail,remoteSocketID})
            // document.querySelector('.messagesbox').appendChild(p);
            document.getElementById('users').innerText = '🟢';
        });
        socket.on("Settingremotesocketid",async (data)=>{
            await new Promise((resolve) => {
        document.querySelector('.container2').style.right = '10px';
        // Add a short delay to ensure the style is applied before proceeding
        setTimeout(resolve, 500);
    });           
    document.querySelector('.container').classList.add('show');
            remoteSocketID = data.id;
            document.getElementById('peeremail').innerText = data.youremail

            // document.getElementById('container2').style.right = '1%'
            // setTimeout(()=>{
            //     document.getElementById('container').style.display = 'block'
            // },500);   
            connectionelement.innerText = '🟢'         
            

        });
        socket.on("disconnected-users", (removeduser) => {
            // const p = document.createElement("p");
            // p.style.color = 'black';
            // p.style.fontWeight = 'bold';
            // p.innerText = removeduser + " left The Chat"
            // document.querySelector('.messagesbox').appendChild(p);
            // document.getElementById('users').innerText = 'Disconnected';
        });

        socket.on("incoming-call", async (data) => {
            // alert("Incoming Call")

            console.log(`${data.from} is calling you`);
            if (!remoteSocketID) {
                remoteSocketID = data.from;
            }

            // connectionelement.innerText = 'Set again'

            const ans = await peer.getAnswer(data.offer);
            socket.emit("call-accepted", { to: data.from, ans });
            await peer.setLocalDescription(data.offer);

            await setupplayer();

        });

        socket.on("call-connected", async (data) => {
            await peer.setLocalDescription(data.ans);
            console.log("Call Connected");
           

            await setupTracks();
            socket.emit("setuptracks",data.from)



        });
        socket.on("remotetracksetup",async ()=>{
            await setupTracks();
        })

        async function setupTracks() {
            try {
                const stream = await mystream();
                const tracks = stream.getTracks();

                tracks.forEach((track) => {
                    peer.peer.addTrack(track, stream);
                });
            } catch (error) {
                console.error('Error setting up tracks:', error);
            }
        }

        socket.on("peer-nego-needed", async ({ from, offer }) => {
            console.log("peer-nego")
            const ans = await peer.getAnswer(offer);
            socket.emit('peer-nego-done', { to: from, ans });


        });

        socket.on("peer-nego-final", async ({ from, ans }) => {
            console.log("final")
            await peer.setLocalDescription(ans)
            await peer.setupDataChannel();
            // console.log("data channel created 2");
            
        });
        socket.on("ice-candidate", async ({ from, candidate }) => {
    // Handle the received ICE candidate
        await peer.handleIceCandidate(candidate);
        // console.log(candidate);
        });

        async function mystream() {
            try {
                
                localstream  =  await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                console.log("audiostream",localstream.getAudioTracks())
                console.log("videostream",localstream.getVideoTracks())

                return localstream;
            } catch (error) {
                console.error('Error accessing user media:', error);
                throw error;
            }
        }
        async function stopVideoStream() {
            try {
                // console.log(localstream);
                const tracks = localstream.getVideoTracks();
                // console.log("video tracks stopping",tracks)

                // Stop each video track in the stream
                    tracks.forEach(track => {
                        track.stop();
                        localstream.removeTrack(track)
                    
                    });
                    console.log("removedtrracks",localstream.getVideoTracks())

                // Update the UI or perform other actions as needed
            } catch (error) {
                console.error('Error stopping video stream:', error);
            }
        }
        document.getElementById('cam').addEventListener('click', async () => {
            const container = document.getElementById('container2');

            async function offcam(){
                // container.querySelector('video').srcObject = null
                const audioStream = new MediaStream(localstream.getAudioTracks());

// Set the new MediaStream as the srcObject for the video element
            container.querySelector('video').srcObject = audioStream;
                await stopVideoStream();
                container.classList.add("oncam");
                socket.emit("srcobjremove",remoteSocketID);

            }
            async function startcam(){
                const tracks = localstream.getVideoTracks();
                const newStream = await navigator.mediaDevices.getUserMedia({ video: true });
                console.log("newstream",newStream)
                console.log("newstreamvideo",newStream.getVideoTracks())
                // console.log("localstreamaudio",localstream.getAudioTracks())

                const newTracks = newStream.getVideoTracks();
                newTracks.forEach(track => {
                    localstream.addTrack(track);
                    peer.peer.addTrack(track, newStream);
                    // Add new video tracks to the stream
                });

                container.querySelector('video').srcObject = localstream

                container.classList.remove("oncam");

            }
            if(container.classList.contains("oncam")){
                startcam();
            }
            else{
                offcam();
            }
            
        });
        socket.on("removesrcobj",()=>{
            const container2 = document.getElementById('container');
    const audioStream = new MediaStream(localstream.getAudioTracks());

    // Set the new MediaStream as the srcObject for the video element
    container2.querySelector('video').srcObject = audioStream;
        })


        async function setupplayer() {
            try {
                const container = document.getElementById('container2');
                let url = await mystream();

                console.log("ye h url",url.getVideoTracks());
                console.log("ye h audiourl",url.getAudioTracks());
                let remoteVideoElement = container.querySelector('video');
                if (!remoteVideoElement) {
            remoteVideoElement = document.createElement('video');
            remoteVideoElement.style.position = 'absolute'
            remoteVideoElement.style.left = '50%'
            remoteVideoElement.style.top = '50%'
            remoteVideoElement.style.transform = 'translate(-50%,-50%)';  
            // remoteVideoElement.style.minWidth = '540px'
            remoteVideoElement.style.maxWidth = `${container.offsetWidth}px`
            // remoteVideoElement.style.minHeight = '700px'
            // remoteVideoElement.style.maxHeight = `${container.offsetHeight}px`
            remoteVideoElement.style.borderRadius = '10px'
            remoteVideoElement.autoplay = true;
            remoteVideoElement.playsinline = true;
            // remoteVideoElement.volume = '0';

            container.appendChild(remoteVideoElement);
            remoteVideoElement.srcObject = url;

        }
                // renderReactPlayer(container, { url, playing: true });
            } catch (error) {
                console.error('Error setting up player:', error);
            }
        }

        document.querySelector('#sendimg').addEventListener('click', async function () {
            const inputmsg = document.getElementById('textinput').value;
            peer.sendMessage(inputmsg);
            const p = document.createElement('div');
            p.classList.add('mymsg')
            const span  = document.createElement('span')
            span.innerText =  inputmsg;
            
            p.appendChild(span)
            document.querySelector('.messagesbox').appendChild(p);

        });

        document.querySelector('#call-button').addEventListener('click', async function () {
            const offer = await peer.getoffer();
            await setupplayer();

            socket.emit("user-call", { to: remoteSocketID, offer });
        });
        peer.peer.addEventListener('icecandidate', (event) => {
            if (event.candidate) {
             socket.emit("ice-candidate", { to: remoteSocketID, candidate: event.candidate });
                    }
                });


        peer.peer.addEventListener('negotiationneeded', async () => {
            const offer = await peer.getoffer();
            socket.emit('peer-nego-needed', { offer, to: remoteSocketID });
        });

        peer.peer.addEventListener('track', async (ev) => {
    try {
       
        let remoteStream = ev.streams[0]; 
        const container = document.getElementById('container');
        const peercontainer = document.getElementById("container2");
        const container3 = document.querySelector(".container3")
        // console.log("audiotracksssssss",ev.streams[0].getAudioTracks())
        // console.log("videotracksssssss,",ev.streams[0].getVideoTracks()[0].id)
        
        if (!container) {
            throw new Error("Container2 not found");
        }

        // Logging for debugging
        console.log('stream',remoteStream.getVideoTracks());

        // Check if remoteStream is a valid MediaStream
        if (!(remoteStream instanceof MediaStream)) {
            throw new Error('Invalid remote stream object');
        }
        if(ev.streams[0].getVideoTracks()[0].id === peerSSID){
            let remoteVideoElement = container3.querySelector('video');
                if (!remoteVideoElement) {
                    remoteVideoElement = document.createElement('video');
                }
                    container.style.display = 'none'
                    container.classList.add("shift-right")
                    container.style.display = 'block'
                    updateVideoWidth(container)
                    peercontainer.style.display = 'none'
                    peercontainer.classList.add("shift-right")
                    peercontainer.style.display = 'block'
                    updateVideoWidth(peercontainer)
                    //
                    remoteVideoElement.style.position = 'absolute'
                    remoteVideoElement.style.left = '0px'
                    remoteVideoElement.style.top = '50%'
                    remoteVideoElement.style.transform = 'translate(0,-50%)'
                    remoteVideoElement.style.maxWidth = '1150px'
                    remoteVideoElement.style.borderRadius = '10px'
                    remoteVideoElement.autoplay = true;
                    remoteVideoElement.playsinline = true;
                    container3.appendChild(remoteVideoElement);
                    remoteVideoElement.srcObject = remoteStream;

                    socket.on("removeSSsrcFromPeers",()=>{
                        remoteVideoElement.srcObject = null
                    })
        }
        else{
        // Get the video element or create one if it doesn't exist
        let remoteVideoElement = container.querySelector('video');
        if (!remoteVideoElement) {
            remoteVideoElement = document.createElement('video');
        }
            remoteVideoElement.style.position = 'absolute'
            remoteVideoElement.style.left = '50%'
            remoteVideoElement.style.top = '50%'
            remoteVideoElement.style.transform = 'translate(-50%,-50%)';  
            // remoteVideoElement.style.minWidth = '540px'
            remoteVideoElement.style.minWidth = `${container.offsetWidth}px`
            remoteVideoElement.style.maxWidth = `${container.offsetWidth}px`
            remoteVideoElement.style.borderRadius = '10px'
            remoteVideoElement.autoplay = true;
            remoteVideoElement.playsinline = true;
            // remoteVideoElement.volume = '0'
            container.appendChild(remoteVideoElement);
        

        // Set the srcObject property to the MediaStream
        remoteVideoElement.srcObject = remoteStream;

        // Handle errors (optional)
        remoteVideoElement.addEventListener('error', (error) => {
            console.error('Error displaying the remote stream:', error);
        });
    }

    } catch (error) {
        console.error('Error in track event handling:', error);
        }
    });
    

    peer.peer.addEventListener('datachannel', event => {
        const dataChannel = event.channel;
        console.log('Data channel created:', dataChannel);
        dataChannel.onopen = () => {
            console.log('Data channel opened');
        // Perform actions when the data channel is opened
        };
        dataChannel.onmessage = event => {



            const p = document.createElement('p');
            p.id = 'peermsg'
            p.innerText = "Peer : " + event.data;

            document.querySelector('.messagesbox').appendChild(p);

            // console.log('Received message:', event.data);
        // Handle incoming messages here
        };  
    });
    document.getElementById("mic").addEventListener('click',function(){
            const audiotracks = localstream.getAudioTracks();
            console.log("0",audiotracks[0])

            audiotracks.forEach(track=> {
                track.enabled  = !track.enabled
                console.log(track.enabled)
            })
        })


    //ScreenSharing
    socket.on("peerSSID",(data)=>{
        peerSSID = data.SSID;
    })
    
    const displayMediaOptions = {
        video: {
            displaySurface: "browser",
        },
        audio: {
            suppressLocalAudioPlayback: false,
        },
        preferCurrentTab: false,
        selfBrowserSurface: "exclude",
        systemAudio: "include",
        surfaceSwitching: "include",
        monitorTypeSurfaces: "include",
    };
    async function startCapture(displayMediaOptions) {
    let captureStream = null;

    try {
        captureStream =
        await navigator.mediaDevices.getDisplayMedia(displayMediaOptions);
        } catch (err) {
            console.error(`Error: ${err}`);
        }
        // console.log("Screenshare",captureStream)
        return captureStream;
        }


        async function screenshare() {
            try {
                const peercontainer = document.querySelector(".container")
                const container = document.querySelector('.container3');
                const mycontainer = document.querySelector(".container2")
                const url = await startCapture();
                console.log("ye h screen share url",url);
                const tracks = url.getTracks();
                const t = url.getVideoTracks();

                tracks.forEach((track) => {
                console.log("tracks",track)
                socket.emit("screenshareID",{to:remoteSocketID,SSID:track.id});
                peer.peer.addTrack(track, url);
                });
                let remoteVideoElement = container.querySelector('video');
                if (!remoteVideoElement) {
                    remoteVideoElement = document.createElement('video');
                }
                    mycontainer.style.display = 'none'
                    mycontainer.classList.add("shift-right")
                    mycontainer.style.display = 'block'
                    updateVideoWidth(mycontainer);
                    peercontainer.style.display = 'none'
                    peercontainer.classList.add("shift-right")
                    peercontainer.style.display = 'block'
                    updateVideoWidth(peercontainer);


                    remoteVideoElement.style.position = 'absolute'
                    remoteVideoElement.style.left = '0px'
                    remoteVideoElement.style.top = '50%'
                    remoteVideoElement.style.transform = 'translate(0,-50%)'
                    remoteVideoElement.style.maxWidth = '1150px'
                    remoteVideoElement.style.borderRadius = '10px'
                    remoteVideoElement.autoplay = true;
                    remoteVideoElement.playsinline = true;
                    container.appendChild(remoteVideoElement);
                    remoteVideoElement.srcObject = url;

                url.getVideoTracks()[0].onended = function () {
                    t.forEach((track)=>{
                        url.removeTrack(track);
                        track.stop()
                        console.log(url.getVideoTracks())
                    })
                    socket.emit("removeSSsrc",remoteSocketID)
                    remoteVideoElement.srcObject = null
                };
                
                // renderReactPlayer(container, { url, playing: true });
            } catch (error) {
                console.error('Error setting up player:', error);
            }
            
        }
        
        document.getElementById("screenshare").addEventListener('click',function(){
            screenshare();
        })
        document.getElementById("messageboxicon").addEventListener("click", () => {
            const chatPanel = document.querySelector(".chat");
            const videopanel = document.querySelector(".video");

            const isOpen = chatPanel.style.right === "10px";
            chatPanel.style.right = isOpen ? "-350px" : "10px";
            videopanel.style.right = isOpen ? "0px" : "180px" 

        });

        function updateVideoWidth(container) {
            if(container.querySelector('video')){
                container.querySelector('video').style.maxWidth = `${container.offsetWidth}px`; 
            }
        }



    </script>
</body>
</html>