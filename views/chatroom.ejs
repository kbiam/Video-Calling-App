<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/chatroom.css">
</head>
<body>
    <h1>Chatroom</h1>
    <h3 id="users">No one in the room</h3>
    <div id="container"></div>
    <div class="container2" id="container2"></div>
    <button id="call-button">Call</button>
    <div class="messagesbox"></div>

    <script src="/socket.io/socket.io.js"></script>
    <script src='https://cdn.jsdelivr.net/npm/react-player/dist/ReactPlayer.standalone.js'></script>
    <script type="module" src="/peer.js"></script>

    <script type="module">
            import peer from "/peer.js";

            const urlParams = new URLSearchParams(window.location.search);
            let emailID = urlParams.get('emailID');
            let roomID = urlParams.get('roomID');
            let remoteSocketID;
            let connectionelement = document.getElementById('users')

            const socket = io();
            socket.emit('join-room',{roomID : roomID, emailID: emailID});
            socket.on("room:join",(data)=>{
            console.log(data);
            });
            socket.on('update-users', (users) => {
            console.log('Users in the room:', users);
    // Update UI or perform other actions as needed
            });

            socket.on("user-joined", (data)=>{
                const p =  document.createElement("p");
                p.style.color = 'black';
                p.style.fontWeight='bold'
                p.innerText = data['emailID'] + "                 Joined The Chat"
                remoteSocketID = data['id'];
                document.querySelector('.messagesbox').appendChild(p);
                document.getElementById('users').innerText='Connected';
                });
            socket.on("disconnected-users",(removeduser)=>{
                const p =  document.createElement("p");
                p.style.color = 'black';
                p.style.fontWeight='bold'
                p.innerText = removeduser + "                 left The Chat"
                document.querySelector('.messagesbox').appendChild(p);
                document.getElementById('users').innerText='Disconnected';

            })
            socket.on("incoming-call",async (data)=>{
                console.log(`${data.from} is calling you`);
                if(!remoteSocketID){
                    remoteSocketID = data.from;
                }
    
                connectionelement.innerText = 'Connected'
                
                const ans = await peer.getAnswer(data.offer);
                socket.emit("call-accepted",{to:data.from, ans});
                setupplayer();
            })
            socket.on("call-connected", (ans) => {
                peer.setLocalDescription(ans);
                console.log("Call Connected");

                setupTracks();
                });

            async function setupTracks() {
            try {
                const stream = await mystream();
                const tracks = stream.getTracks();

                tracks.forEach((track) => {
                peer.peer.addTrack(track, stream);
                });
                } catch (error) {
                console.error('Error setting up tracks:', error);
            }
        }

                
            
            socket.on("peer-nego-needed",async ({from,offer})=>{
                const ans = await peer.getAnswer(offer);
                socket.emit('peer-nego-done',{to:from,ans});

            });
            socket.on("peer-nego-final",async ({from,ans})=>{
                await peer.setLocalDescription(ans)
            })


    async function mystream() {
        try {
            return await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
        } catch (error) {
            console.error('Error accessing user media:', error);
            throw error;
        }
    }

    async function setupplayer() {
        try {
            const container = document.getElementById('container');
            const url = await mystream();
            renderReactPlayer(container, { url, playing: true });
        } catch (error) {
            console.error('Error setting up player:', error);
        }
    }
    

    document.querySelector('#call-button').addEventListener('click', async function () {
        const offer = await peer.getoffer();
        socket.emit("user-call",{to: remoteSocketID, offer});
        setupplayer();

    });
    
    peer.peer.addEventListener('negotiationneeded',async ()=>{
        const offer = await peer.getoffer();
        socket.emit('peer-nego-needed',{offer,to:remoteSocketID});

    })

    peer.peer.addEventListener('track', async (ev) => {
    try {
        const remoteStream = ev.streams; // Assuming you are dealing with the first stream in the array
        const container2 = document.getElementById('container2');

        if (!container2) {
            throw new Error("Container2 not found");
        }

        console.log(remoteStream[0]);
        const url2 = await remoteStream[0];


        // Convert MediaStream to URL
        // Use the URL in your renderReactPlayer function
        renderReactPlayer(container2, { url2, playing: false }); // Set playing to false initially

        // Wait for the media to be fully loaded
        container2.addEventListener('loadedmetadata', () => {
            // Once loaded, play the media
            renderReactPlayer(container2, { url2, playing: true });
        });
    } catch (error) {
        console.error('Error in track event handling:', error);
    }
});

            






    </script>
</body> 
</html> -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/chatroom.css">
</head>
<body>
    <!-- <h1 id="chatroom">Chatroom</h1> -->
    <h3 id="users">No one in the room</h3>
    <!-- <p id="stream">Not recieving stream</p> -->
    <!-- <h1 id="mystream">My Stream</h1> -->
    <div id="container"></div>
    <!-- <h1 id="remoteStream">Remote Stream</h1> -->
    <div class="container2" id="container2">
   
    </div>
    <!-- <div class="messagesbox"></div> -->
    <div class="chatarea">
        <input type="text" id="inputmsg">
        <button id="msg">Send message</button>
        <button id="call-button">Call</button>
        <div class="chat">
 
        </div>


    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src='https://cdn.jsdelivr.net/npm/react-player/dist/ReactPlayer.standalone.js'></script>
    <script type="module" src="/peer.js"></script>

    <script type="module">
        import peer from "/peer.js";

        const urlParams = new URLSearchParams(window.location.search);
        let emailID = urlParams.get('emailID');
        let roomID = urlParams.get('roomID');
        let remoteSocketID;
        let connectionelement = document.getElementById('users')

        const socket = io();
        socket.emit('join-room', { roomID: roomID, emailID: emailID });
        socket.on("room:join", (data) => {
            console.log(data);
        });
        socket.on('update-users', (users) => {
            console.log('Users in the room:', users);
            // Update UI or perform other actions as needed
        });

        socket.on("user-joined", (data) => {
            // const p = document.createElement("p");
            // p.style.color = 'black';
            // p.style.fontWeight = 'bold';
            // p.innerText = data['emailID'] + " Joined The Chat"
            remoteSocketID = data['id'];
            socket.emit("Setremotesocketid",remoteSocketID)
            // document.querySelector('.messagesbox').appendChild(p);
            document.getElementById('users').innerText = 'Connected';
        });
        socket.on("Settingremotesocketid",(id)=>{
            remoteSocketID = id;
            connectionelement.innerText = 'Connected'

        });
        socket.on("disconnected-users", (removeduser) => {
            // const p = document.createElement("p");
            // p.style.color = 'black';
            // p.style.fontWeight = 'bold';
            // p.innerText = removeduser + " left The Chat"
            // document.querySelector('.messagesbox').appendChild(p);
            // document.getElementById('users').innerText = 'Disconnected';
        });

        socket.on("incoming-call", async (data) => {

            console.log(`${data.from} is calling you`);
            if (!remoteSocketID) {
                remoteSocketID = data.from;
            }

            // connectionelement.innerText = 'Set again'

            const ans = await peer.getAnswer(data.offer);
            socket.emit("call-accepted", { to: data.from, ans });
            setupplayer();

        });

        socket.on("call-connected", async (data) => {
            await peer.setLocalDescription(data.ans);
            console.log("Call Connected");
           

            await setupTracks();
            socket.emit("setuptracks",data.from)



        });
        socket.on("remotetracksetup",()=>{
            setupTracks();
        })

        async function setupTracks() {
            try {
                const stream = await mystream();
                const tracks = stream.getTracks();

                tracks.forEach((track) => {
                    peer.peer.addTrack(track, stream);
                });
            } catch (error) {
                console.error('Error setting up tracks:', error);
            }
        }

        socket.on("peer-nego-needed", async ({ from, offer }) => {
            const ans = await peer.getAnswer(offer);
            socket.emit('peer-nego-done', { to: from, ans });


        });

        socket.on("peer-nego-final", async ({ from, ans }) => {
            await peer.setLocalDescription(ans)
            await peer.setupDataChannel();
            // console.log("data channel created 2");
            
        });
        socket.on("ice-candidate", async ({ from, candidate }) => {
    // Handle the received ICE candidate
        await peer.handleIceCandidate(candidate);
        // console.log(candidate);
        });

        async function mystream() {
            try {
                return await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
            } catch (error) {
                console.error('Error accessing user media:', error);
                throw error;
            }
        }

        async function setupplayer() {
            try {
                const container = document.getElementById('container');
                const url = await mystream();
                console.log("ye h url",url);
                let remoteVideoElement = container2.querySelector('video');
                if (!remoteVideoElement) {
            remoteVideoElement = document.createElement('video');
            remoteVideoElement.style.left = '0px'
            remoteVideoElement.style.top = '0px'
            remoteVideoElement.style.minWidth = '450px'
            remoteVideoElement.style.maxWidth = '450px'
            remoteVideoElement.style.minHeight = '350px'
            remoteVideoElement.style.maxHeight = '350px'
            remoteVideoElement.style.borderRadius = '10px'
            remoteVideoElement.autoplay = true;
            remoteVideoElement.playsinline = true;
            container.appendChild(remoteVideoElement);
            remoteVideoElement.srcObject = url;

        }
                // renderReactPlayer(container, { url, playing: true });
            } catch (error) {
                console.error('Error setting up player:', error);
            }
        }

        document.querySelector('#msg').addEventListener('click', async function () {
            const inputmsg = document.getElementById('inputmsg').value;
            peer.sendMessage(inputmsg);
            const p = document.createElement('p');
            p.innerText = "You: " + inputmsg;
            document.querySelector('.chat').appendChild(p);

        });

        document.querySelector('#call-button').addEventListener('click', async function () {
            const offer = await peer.getoffer();
            socket.emit("user-call", { to: remoteSocketID, offer });
            setupplayer();
        });
        peer.peer.addEventListener('icecandidate', (event) => {
            if (event.candidate) {
             socket.emit("ice-candidate", { to: remoteSocketID, candidate: event.candidate });
                    }
                });


        peer.peer.addEventListener('negotiationneeded', async () => {
            const offer = await peer.getoffer();
            socket.emit('peer-nego-needed', { offer, to: remoteSocketID });
        });

        peer.peer.addEventListener('track', async (ev) => {
    try {
        const remoteStream = ev.streams[0]; // Assuming you are dealing with the first stream in the array
        const container2 = document.getElementById('container2');

        if (!container2) {
            throw new Error("Container2 not found");
        }

        // Logging for debugging
        console.log('Remote stream:', remoteStream);

        // Check if remoteStream is a valid MediaStream
        if (!(remoteStream instanceof MediaStream)) {
            throw new Error('Invalid remote stream object');
        }

        // Get the video element or create one if it doesn't exist
        let remoteVideoElement = container2.querySelector('video');
        if (!remoteVideoElement) {
            remoteVideoElement = document.createElement('video');
            remoteVideoElement.style.left = '0px'
            remoteVideoElement.style.top = '0px'
            remoteVideoElement.style.minWidth = '450px'
            remoteVideoElement.style.maxWidth = '450px'
            remoteVideoElement.style.minHeight = '350px'
            remoteVideoElement.style.maxHeight = '350px'
            remoteVideoElement.style.borderRadius = '10px'
            remoteVideoElement.autoplay = true;
            remoteVideoElement.playsinline = true;
            container2.appendChild(remoteVideoElement);
        }

        // Set the srcObject property to the MediaStream
        remoteVideoElement.srcObject = remoteStream;

        // Handle errors (optional)
        remoteVideoElement.addEventListener('error', (error) => {
            console.error('Error displaying the remote stream:', error);
        });

    } catch (error) {
        console.error('Error in track event handling:', error);
        }
    });

    peer.peer.addEventListener('datachannel', event => {
        const dataChannel = event.channel;
        console.log('Data channel created:', dataChannel);
        dataChannel.onopen = () => {
            console.log('Data channel opened');
        // Perform actions when the data channel is opened
        };
        dataChannel.onmessage = event => {



            const p = document.createElement('p');
            p.innerText = "Peer : " + event.data;

            document.querySelector('.chat').appendChild(p);

            // console.log('Received message:', event.data);
        // Handle incoming messages here
        };  
    });


    </script>
</body>
</html>
`